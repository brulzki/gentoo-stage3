#!/bin/bash

###############################################################################
#
#  gentoo-stage3 : script to install a gentoo stage3 into a directory
#  
#   license: 
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#  
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#   requires:
#    - wget and a working internet connection for HTTP fetches
#
#   output environment description:
#    - uses the latest stage3 and portage (ie: 'very latest gentoo')
#   
#   notes:
#    - dedicated to all fellow ethical unix hackers who do not work for 
#      morally corrupt governments and corporations: use your powers for good!
#
#   authors: Bruce Schultz
#
#    based on lxc-gentoo <https://github.com/globalcitizen/lxc-gentoo
#
###############################################################################

CACHE="${CACHE:-/var/cache/gentoo}"
alias wget="wget --timeout=8 --read-timeout=15 -c -t10 -nd"

# Defaults only
NAME="${NAME:-gentoo}"
UTSNAME="${UTSNAME:-gentoo}"
IPV4="${IPV4:-172.20.0.2/24}"
GATEWAY="${GATEWAY:-172.20.0.1}"
GUESTROOTPASS="$GUESTROOTPASS"
ARCH="${ARCH:-amd64}"
ARCHVARIANT="${ARCHVARIANT:-${ARCH}}"
CONFFILE="$CONFFILE"
MIRROR="${MIRROR:-http://distfiles.gentoo.org}"
STAGE3_TARBALL="${STAGE3_TARBALL}"
PORTAGE_SOURCE="$PORTAGE_SOURCE"

# These paths are within the container so do not need to obey configure prefixes
INITTAB="/etc/inittab"
FSTAB="/etc/fstab"

# Ensure strict root's umask doesen't render the VM unusable
umask 022

usage()
{
	cat <<EOF
Usage: ${0##*/} [options] TARGET
Create a Gentoo system stage3 rootfs in the target directory.
EOF
}

help()
{
    usage
	cat <<EOF

  Options:
    --help                    display this help and exit
    --config=FILE             load options from FILE
    -q --quiet
    --verbose

  Stage options:
    -a --arch=ARCH            set the architecture of the stage3
                                [x86|amd64|x86_64|arm|...]
    --variant                 select the architecture variant
                                [hardened|nomultilib|hardened+nomultilib]
    --cache=DIR               set the cache path
                                [$CACHE]
    -m --mirror               select the mirror
                                [$MIRROR]
    -t --stage3-tarball=FILE  use FILE instead of downloading the stage3 tarball
    --portage=SOURCE          select where to load portage from
                                [snapshot|latest|rsync|none]

  Portage config options:
    --portdir
    --distdir
    --pkgdir
    [--features]
    --profile

  System config options:
    --timezone
    --hostname
    (network options: ip & gateway)
    --kernel - install a kernel binary (useful for an installer, not for chroot or lxc)
EOF
}

################################################################################
#                        Various helper functions
################################################################################

# param: $1: the name of the lock
# The rest contain the command to execute and its parameters
execute_exclusively()
{
	mkdir -p /var/lock/subsys

	local lock_name="$1"
	shift 1

	{
		printf "Attempting to obtain an exclusive lock (timeout: 30 min) named \"%s\"...\n" "$lock_name"

		printf -v time_started "%(%s)T" "-1"
		flock -x -w 1800  50

		if [[ $? -ne 0 ]]; then
			printf " => unable to obtain after %s seconds, aborting.\n" "$(($(printf "%(%s)T" "-1") - $time_started))"
			return 2
		else
			printf " => done, took %s seconds.\n" "$(($(printf "%(%s)T" "-1") - $time_started))"
		fi

		printf " => Executing \"%s\"\n" "$*"
		"$@"

	} 50> "/var/lock/subsys/$lock_name"
}

# Please use these suggested error codes:
# die 1 ... -- general/unspecified failure
# die 2 ... -- filesystem error (e.g. tar unpacking failed)
# die 4 ... -- network error
# die 8 ... -- error in program logic
# die 16 .. -- erroneous (user) input
# or any combination of these.

die()
{
	printf "\n[the last exit code leading to this death was: %s ]\n" "$?"
	local retval="$1"
	shift 1
	printf "$@"
	exit "$retval"
}

################################################################################
#                    DISTRO custom configuration files
################################################################################

populate_dev()
{
	cd "$ROOTFS/dev" || die 2 "Unable to change directory to %s!\n" "$ROOTFS/dev"

	# we silence errors as newer stage3s already include needed device files
	{
		# newer stage3 include too many useless nodes, remove them
		rm -f hda*
		rm -f sda*
		rm -f sdb*
		rm -f sdc*
		rm -f sdd*
		rm -f tty*
		rm -f core
		rm -f mem
		rm -f port
		rm -rf input/

		# tabsize 4
		mknod -m 666 null		c 1 3
		mknod -m 666 zero		c 1 5
		mknod -m 666 full		c 1 7

		mknod -m 666 random		c 1 8
		mknod -m 666 urandom	c 1 9

		mknod -m 600 console	c 5 1
		mknod -m 666 tty		c 5 0
		mknod -m 666 tty0		c 4 0
		mknod -m 666 tty1		c 4 1

		mknod -m 600 initctl	p

		mknod -m 666 ptmx		c 5 2
		mkdir -m 755 pts

		mkdir -m 1777 shm

		mkdir -m 755 net
		mknod -m 666 net/tun	c 10 200

	} 2> /dev/null
	cd - > /dev/null
}

# custom fstab
write_distro_fstab()
{
	cat <<- EOF > "$ROOTFS/$FSTAB"
	# required to prevent boot-time error display
	none    /         none    defaults  0 0
	tmpfs   /dev/shm  tmpfs   defaults  0 0
	EOF
}

write_distro_timezone()
{
	if [ -e /etc/localtime ]; then
		# duplicate host timezone
		cat /etc/localtime > "$ROOTFS/etc/localtime"
	else
		# otherwise set up UTC
		rm "$ROOTFS/etc/localtime" > /dev/null 2>&1
		ln -s ../usr/share/zoneinfo/UTC "$ROOTFS/etc/localtime"
	fi
}

setup_portage()
{
	# do a primitive portage setup
	mkdir -p "$ROOTFS/etc/portage" && \
	mkdir -p "$ROOTFS/var/portage/tmp" && \
	mkdir -p "$ROOTFS/var/portage/tree" && \
	mkdir -p "$ROOTFS/var/portage/logs" && \
	mkdir -p "$ROOTFS/var/portage/packages" && \
	mkdir -p "$ROOTFS/var/portage/distfiles" \
		|| die 2 "Error: unable to create needed portage directories.\n"

	# relocate profile symlink
	local src="$ROOTFS/etc/portage/make.profile"
	local dest="$(readlink "$src")"
	dest="${dest##*../}"
	dest="${dest//usr\/portage/var/portage/tree}"
	dest="$ROOTFS/$dest"
	ln -f -s -r "$dest" "$src" \
		|| die 2 "Error: unable to relocate portage symlink:\n%s -> %s\n" "$src" "$dest"

	cat <<- EOF >> "$ROOTFS/etc/portage/make.conf"
	PORTAGE_TMPDIR="/var/portage/tmp"
	PORTDIR="/var/portage/tree"
	PORT_LOGDIR="/var/portage/logs"
	PKGDIR="/var/portage/packages"
	DISTDIR="/var/portage/distfiles"

	# enable this to store built binary packages
	#FEATURES="\$FEATURES buildpkg"

	FEATURES="\$FEATURES compress-build-logs"
	FEATURES="\$FEATURES split-log"
	FEATURES="\$FEATURES split-elog"
	EOF

	if [[ "$PORTAGE_SOURCE" == "none" ]]; then
		printf "Skipping portage tree setup\n"
	else
		# We need to set up the portage tree
		if [[ -z "$PORTAGE_SOURCE" ]]; then
			execute_exclusively "portage" fetch_portage \
				|| die 1 "Error: unable to fetch a portage snapshot.\n"
		fi

		# PORTAGE_SOURCE will be set by fetch_portage.
		if [[ -f "$PORTAGE_SOURCE" ]]; then
			printf "Extracting the portage tree into %s/var/portage/tree...\n" "$ROOTFS"
			tar -xp --strip-components 1 -C "$ROOTFS/var/portage/tree/" -f "$PORTAGE_SOURCE" \
				|| die 2 "Error: unable to extract the portage tree.\n"
		elif [[ -d "$PORTAGE_SOURCE" ]]; then
			printf "Will bind mount the portage tree from the host (%s).\n" "$PORTAGE_SOURCE"
		else
			printf "Warning: I don't know what to do with this portage source (%s)\n" "$PORTAGE_SOURCE"
		fi
	fi
}

# custom network configuration
write_distro_network()
{
	# /etc/resolv.conf
	grep -i 'search ' /etc/resolv.conf > "$ROOTFS/etc/resolv.conf"
	grep -i 'nameserver ' /etc/resolv.conf >> "$ROOTFS/etc/resolv.conf"
}

# custom hostname
write_distro_hostname()
{
	echo -n " - setting hostname..."
	printf "HOSTNAME=%s\n" "$UTSNAME" > "$ROOTFS/etc/conf.d/hostname"
	echo "done."
}

set_guest_root_password()
{
	[[ -z "$GUESTROOTPASS" ]] && return # pass is empty, abort

	echo -n " - setting guest root password.."
	echo "root:$GUESTROOTPASS" | chroot "$ROOTFS" chpasswd
	echo "done."
}

fetch_stage3()
{
	# base stage3 URL
	local stage3url="$MIRROR/releases/$ARCH/autobuilds"

	# get latest-stage3....txt file for subpath
	mkdir -p "$CACHE"
	local stage3latestSubPathUrl="$stage3url/latest-stage3-${ARCHVARIANT}.txt"

	printf "Determining path to latest Gentoo %s (%s) stage3 archive...\n" "$ARCH" "$ARCHVARIANT"
	printf " => downloading and processing %s\n" "$stage3latestSubPathUrl"

	local -a array_of_words
	array_of_words=($(wget -q -O - "$stage3latestSubPathUrl")) \
		|| printf " => Failed.\n"

	# take the last word and convert it to string form:
	latest_stage3_subpath="${array_of_words[-1]}"
	printf " => Got: %s\n" "$latest_stage3_subpath"


	# Download the actual stage3
	local output_file="$CACHE/stage3-$ARCH-$latest_stage3_subpath"
	if [[ -f "$output_file" ]]; then
		printf "Skipping download of stage3 as it is already present.\n"
	else
		printf "Downloading the actual stage3 tarball...\n"

		#  - ensure output directory exists
		local output_dir="${output_file%/*}"
		mkdir -p "$output_dir"

		#  - grab
		local input_url="$stage3url/$latest_stage3_subpath"
		printf " => %s ...\n" "$input_url"

		wget -O "$output_file" "$input_url" \
			|| die 6 "Error: unable to fetch\n"
		printf " => saved to: %s\n" "$output_file"
	fi

	# used by calling function
	STAGE3_TARBALL="$output_file"
}

fetch_portage()
{
	local url="$MIRROR/snapshots/portage-latest.tar.bz2"
	local dest="$CACHE/portage-latest.tar.bz2"

	mkdir -p "$CACHE"
	if [[ ! -f "$dest" ]]; then
		# don't update
		printf "Downloading Gentoo portage (software build database) snapshot...\n"

		wget -O "$dest" "$url" \
			|| die 6 "Error: unable to fetch\n"

		printf " => done.\n"
	fi

	# used by calling function
	PORTAGE_SOURCE="$dest"
}

configure()
{
	if [[ -z ${QUIET} ]]; then
		# choose a container name, default is already in shell NAME variable
		read -p "What is the name for the container (recommended <=15 chars)? " -ei "$NAME" NAME


		# choose a hostname, default is the container name
		UTSNAME=${NAME}
		read -p "What hostname do you wish for this container ? " -ei "$UTSNAME" UTSNAME


		# choose an ipv4 address, better to choose the same network than
		# your host
		read -p "What IP address do you wish for this container (enter 'dhcp' to use DHCP) ? " -ei "$IPV4" IPV4


		# choose the gateway ip address
		if [ "${IPV4}" != "dhcp" ]; then
			read -p "What is the gateway IP address ? " -ei "$GATEWAY" GATEWAY

		fi

		# Type guest root password
		read -s -p "Type guest root password (enter for none/use already defined): "
		if [[ -n "$REPLY" ]]; then
			GUESTROOTPASS="$REPLY"
		fi
		printf "\n" # \n eaten by noecho

		if [[ -z "${STAGE3_TARBALL}" ]]; then
			# choose the mirror
			read -p "Which mirror to use for stage3 and Portage archive ? " -ei "$MIRROR" MIRROR

			# choose the container architecture
			local -a arches
			arches+=("alpha")
			arches+=("amd64")
			arches+=("arm")
			arches+=("hppa")
			arches+=("ia64")
			# arches+=("mips") # project only has experimental stages?
			arches+=("ppc")
			arches+=("s390")
			arches+=("sh")
			arches+=("sparc")
			arches+=("x86")

			printf "\n\nNote that you will have to set up Qemu? emulation yourself\n"
			printf "if your CPU cannot natively execute the chosen architecture (see README).\n"

			printf "\n\nSelect desired container architecture:\n"
			select ARCH in "${arches[@]}"; do
				if [[ -n "$ARCH" ]]; then
					break
				fi
			done

			printf "\nDownloading the list of available variants...\n"
			# we got a valid answer, proceed with variant list
			mapfile -t < <(wget -O - "$MIRROR/releases/$ARCH/autobuilds")
			# I tried to check for errors here but failed miserably, hence the check
			# for an empty variant list down below.

			# parse the returned HTML for latest-stage3-VARIANT.txt
			local -a variants
			local variant

			for line in "${MAPFILE[@]}"; do
				if [[ "$line" = *latest-stage3-*.txt* ]]; then
					variant="${line#*latest-stage3-}"
					variant="${variant%%.txt*}"

					variants+=("$variant")
				fi
			done

			if [[ ${#variants[@]} -eq 0 ]]; then
				die 6 "variants list empty, see wget's output above\n"
			fi

			printf "\n\nSelect desired container subarchitecture/variant for %s:\n" "$ARCH"
			select ARCHVARIANT in "${variants[@]}"; do
				if [[ -n "$ARCHVARIANT" ]]; then
					break
				fi
			done
		fi

	fi

	if [[ -n "$CONFFILE" ]]; then
		if [[ -d "$CONFFILE" ]]; then
			CONFFILE="$CONFFILE/${NAME}.conf"
		# else
		#	we already have a valid config file name
		fi
	else
		CONFFILE="${NAME}.conf"
	fi

	echo "NAME           = $NAME"
	echo "UTSNAME        = $UTSNAME"
	echo "ROOTFS         = $ROOTFS"
	echo "CONFFILE       = $CONFFILE"
	echo "ARCH           = $ARCH"
	echo "ARCHVARIANT    = $ARCHVARIANT"
	echo "STAGE3_TARBALL = $STAGE3_TARBALL"
	echo "GUESTROOTPASS  = (not shown)"
	echo "MIRROR         = $MIRROR"
	echo "PORTAGE_SOURCE = $PORTAGE_SOURCE"
	echo "CACHE          = $CACHE"               
	echo "IPV4           = $IPV4"
	echo "GATEWAY        = $GATEWAY"

	echo -e "Thanks! Now sit back and relax while your gentoo brews...\n\n"
	# nice pondering material
	if which fortune > /dev/null 2>&1 ; then
		echo '-----------------------------------------------------------------'
		if which cowsay > /dev/null 2>&1 ; then
			cowsay `fortune -s`
		else
			fortune
		fi
		echo -e "-----------------------------------------------------------------\n"
	fi
}

extract_stage3()
{
	#configure

	# the rootfs name will be built with the container name
	#ROOTFS="${1}"

	# check if the rootfs already exists
	[[ -e "$ROOTFS" ]] && die 18 "Error: \$ROOTFS (%s) already exists!" "$ROOTFS"
	
	# the stage3 might not be possible to fetch, for isntance if we are offline. in that
	# case we use the latest one available. if that fails also, then we die.
	if [[ -z "$STAGE3_TARBALL" ]]; then
		# Fetch us a stage3
		execute_exclusively "${ARCH}_${ARCHVARIANT}_rootfs" fetch_stage3
		if [[ $? -ne 0 ]]; then
			# try to detect an existing stage3 (sorted to the latest mtime)
			STAGE3_TARBALL=`find $CACHE |grep '/stage3-'${ARCH} | grep tar | xargs ls -t1|head -n 1`
			if [[ ! -e "$STAGE3_TARBALL" ]]; then
				die 18 "ERROR: Failed to fetch stage3, and no previous stage3 available.\n"
			fi
			printf "      - Failed to fetch stage3, but found existing stage3 tarball instead.\n"
		fi
	fi

	# variable is nonzero, try to unpack
	printf "\nUnpacking filesystem from %s to %s ... " "$STAGE3_TARBALL" "$ROOTFS"
	mkdir -p "$ROOTFS"

	tar -xpf "$STAGE3_TARBALL" -C "$ROOTFS"
	if [[ $? -ne 0 ]]; then
		printf "FAILED.\n"
		return 1
	else
		printf "done.\n"
	fi

	#setup_portage
    #
	#write_distro_hostname \
	#	|| die 1 "Error: Failed to write hostname.\n"
    #
	#populate_dev
    #
	#write_distro_fstab \
	#	|| die 1 "Error: Failed to write fstab\n"
    #
	#write_distro_timezone \
	#	|| die 1 "Error: Failed to write timezone\n"
    #
	#write_distro_network \
	#	|| die 1 "Error: Failed to write network configuration\n"
    #
	#set_guest_root_password \
	#	|| die 1 "Error: Failed to set guest root password\n"
    #
	#cat <<-EOF
	#All done!
    #
	#To enter your container for setup WITHOUT running it, try:
	#   mount -t proc proc "$ROOTFS/proc"
	#   mount -o bind /dev "$ROOTFS/dev"
	#   chroot "$ROOTFS" /bin/bash
	#   export PS1="(${NAME}) \$PS1"
	# (${NAME}) #   <-- you are now in the guest
	#
	#(Report bugs to https://github.com/brulzki/gentoo-stage3/issues )";
	#EOF
}

fetch()
{
	configure
	# download
	execute_exclusively "${ARCH}_${ARCHVARIANT}_rootfs" fetch_stage3
	execute_exclusively "portage" fetch_portage
}

#OPTIND=2
#while getopts "i:g:n:u:a:p:m:t:P:q" opt; do
#    case "$opt" in
#    	i) IPV4="$OPTARG" ;;
#    	g) GATEWAY="$OPTARG" ;;
#    	n) NAME="$OPTARG" ;;
#    	u) UTSNAME="$OPTARG" ;;
#    	a) ARCH="$OPTARG" ;;
#    	p) GUESTROOTPASS="$OPTARG" ;;
#    	m) MIRROR="$OPTARG" ;;
#    	t) STAGE3_TARBALL="$OPTARG" ;;
#    	P) PORTAGE_SOURCE="$OPTARG" ;;
#    	q) QUIET=Yes ;;
#    	\?) ;;
#    esac
#done

#case "$1" in
#  create)
#  	create;;
#  fetch)
#  	fetch;;
#  help)
#  	help;;
#  *)
#  	help
#  	exit 1;;
#esac

while :
do
    case $1 in
        -h | --help)
            help
            exit 0
            ;;
        -a | --arch)
            ARCH=$2
            shift 2
            ;;
        --arch=?*)
            ARCH=${1#*=}
            shift
            ;;
        -m | --mirror)
            MIRROR=$2
            shift 2
            ;;
        --mirror=?*)
            MIRROR=${1#*=}
            shift
            ;;
        -*)
			printf >&2 'WARN: Unknown option (ignored): %s\n' "$1"
			shift
			;;
        *)  # no more options; stop loop
            break
            ;;
    esac
done

if [ -z "$1" ]; then
    usage
    echo "Try '${0##*/} --help' for more information"
    exit
fi

# Note: assuming uid==0 is root -- might break with userns??
if [ "$(id -u)" != "0" ]; then
	echo "This script should be run as 'root'"
#	exit 1
fi

ROOTFS=$1

extract_stage3
